#!/bin/bash

# Ubuntu System Update Script
# This script updates the Ubuntu system using various package managers
# Usage: sudo upall [--verbose|-v]

# Set script variables
SCRIPT_DIR="/opt/update-all"
LOG_FILE="$SCRIPT_DIR/update_log.txt"
ERROR_COUNT=0
TOTAL_COMMANDS=7
VERBOSE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                echo "Usage: sudo upall [--verbose|-v]"
                echo ""
                echo "Options:"
                echo "  -v, --verbose    Show detailed output on terminal as well as in log file"
                echo "  -h, --help       Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done
}

# Function to log command output
log_command() {
    local command=$1
    local description=$2

    print_status $BLUE "Running: $description"
    echo "===========================================" >> "$LOG_FILE"
    echo "Command: $command" >> "$LOG_FILE"
    echo "Timestamp: $(date)" >> "$LOG_FILE"
    echo "===========================================" >> "$LOG_FILE"

    # Run command and capture both stdout and stderr
    if [[ "$VERBOSE" == "true" ]]; then
        # In verbose mode, show output on terminal and log to file
        if eval "$command" 2>&1 | tee -a "$LOG_FILE"; then
            print_status $GREEN "✓ Success: $description"
            echo "Status: SUCCESS" >> "$LOG_FILE"
        else
            print_status $RED "✗ Failed: $description"
            echo "Status: FAILED" >> "$LOG_FILE"
            ((ERROR_COUNT++))
        fi
    else
        # Normal mode, only log to file
        if eval "$command" >> "$LOG_FILE" 2>&1; then
            print_status $GREEN "✓ Success: $description"
            echo "Status: SUCCESS" >> "$LOG_FILE"
        else
            print_status $RED "✗ Failed: $description"
            echo "Status: FAILED" >> "$LOG_FILE"
            ((ERROR_COUNT++))
        fi
    fi

    echo "" >> "$LOG_FILE"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_status $RED "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to create log file header
create_log_header() {
    echo "===========================================" > "$LOG_FILE"
    echo "Ubuntu System Update Log" >> "$LOG_FILE"
    echo "Started: $(date)" >> "$LOG_FILE"
    echo "===========================================" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
}

# Function to display final summary
display_summary() {
    echo ""
    print_status $BLUE "==========================================="
    print_status $BLUE "UPDATE SUMMARY"
    print_status $BLUE "==========================================="

    if [[ $ERROR_COUNT -eq 0 ]]; then
        print_status $GREEN "✓ All updates completed successfully!"
        print_status $GREEN "✓ $TOTAL_COMMANDS/$TOTAL_COMMANDS commands executed without errors"
    else
        print_status $RED "✗ $ERROR_COUNT out of $TOTAL_COMMANDS commands failed"
        print_status $YELLOW "Check the log file for details: $LOG_FILE"
    fi

    if [[ "$VERBOSE" == "true" ]]; then
        print_status $BLUE "Verbose mode: Output displayed on terminal and saved to: $LOG_FILE"
    else
        print_status $BLUE "Verbose output saved to: $LOG_FILE"
    fi
    print_status $BLUE "Completed: $(date)"
    print_status $BLUE "==========================================="
}

# Main execution
main() {
    # Parse command line arguments
    parse_arguments "$@"

    # Check if running as root
    check_root

    # Clear screen and show header
    clear
    print_status $BLUE "==========================================="
    print_status $BLUE "Ubuntu System Update Script"
    print_status $BLUE "==========================================="
    print_status $YELLOW "Starting system update at $(date)"
    print_status $BLUE "==========================================="

    # Create log file header
    create_log_header

    # Update package lists
    log_command "apt update -y" "Update package lists"

    # Upgrade installed packages
    log_command "apt upgrade -y" "Upgrade installed packages"

    # Remove unnecessary packages
    log_command "apt autoremove -y" "Remove unnecessary packages"

    # Update snap packages
    log_command "snap refresh" "Update snap packages"

    # Update Cursor (if available)
    log_command "update-cursor" "Update Cursor editor"

    # Additional Ubuntu update commands
    log_command "apt full-upgrade -y" "Full system upgrade (handles dependencies)"
    log_command "apt autoclean" "Clean package cache"

    # Update Flatpak packages (if available)
    if command -v flatpak &> /dev/null; then
        log_command "flatpak update -y" "Update Flatpak packages"
    else
        print_status $YELLOW "⚠ Flatpak not installed, skipping Flatpak updates"
    fi

    # Check if reboot is required
    if [ -f /var/run/reboot-required ]; then
        print_status $YELLOW "⚠ System reboot is required after updates"
        echo "Reboot required: YES" >> "$LOG_FILE"
    else
        print_status $GREEN "✓ No reboot required"
        echo "Reboot required: NO" >> "$LOG_FILE"
    fi

    # Display final summary
    display_summary

    # Exit with appropriate code
    if [[ $ERROR_COUNT -eq 0 ]]; then
        exit 0
    else
        exit 1
    fi
}

# Run main function
main "$@"
